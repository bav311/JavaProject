Д1
Давайте поможем Амиго победить Диабло. Для этого напишем программу,
в которой они сразятся друг с другом.

Для начала Диабло нужно будет обнаружить, для этого мы сгенерируем ему случайную позицию
(число от 1 до 4), а потом будем угадывать в какой позиции он находится.
После того, как Диабло будет найден, нужно будет сразиться с ним.
ля этого у Амиго и Диабло будет по 9 "жизней" (прям как у котов). Амиго будет атаковать,
а Диабло — защищаться.
Но если Диабло защитился, то он сразу же наносит Амиго ответный удар (Амиго теряет "жизнь").
Если же Диабло не защитился, то он теряет 3 "жизни".
Атака и защита происходит рандомно в одной из трех зон (верх/середина/низ,
но для простоты будем использовать числа от 1 до 3). Ход боя и результат будут
выводиться на экран в реальном времени.
Чтобы не было сложно, разобьем эту задачу на 4 этапа.

В этой (первой) части нужно в класс Solution добавить публичную статическую
переменную (поле) diabloPosition типа int, в которой будет храниться позиция Диабло.
В методе main присвой этой перенной случайное значение от 1 до 4.
Для этого воспользуйся уже реализованным методом getRandomNumber(int), передав
в него верхнюю границу диапазона — число 4.

Далее в классе Solution создай публичный статический метод void findDiablo(),
в котором сначала выведи на экран значение переменной getFirstPositionPhrase,
а потом считывай с клавиатуры числа до тех пор, пока не будет угадана позиция Диабло.
При этом если позиция не угадана, то выведи фразу — значение переменной getPositionPhrase,
а если угадали, то значение переменной findDiabloPhrase.
Вызови метод findDiablo в методе main после присвоения значения переменной diabloPosition.

Требования:
В классе Solution должна быть публичная статическая переменная diabloPosition типа int.
В методе main класса Solution переменной diabloPosition должно быть присвоено значение -
результат работы метода getRandomInt с аргументом 4.
В классе Solution должен быть публичный статический метод void findDiablo().
Вызов метода findDiablo() должен считывать значения с клавиатуры до тех пор,
пока не будет введено значение равное значению переменной diabloPosition.
Метод findDiablo() класса Solution должен выводить в консоль значения
переменных getFirstPositionPhrase, getPositionPhrase и findDiabloPhrase.
В методе main класса Solution должен быть вызван метод findDiablo().
       +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Д2
В классе Solution добавь поля (переменные), которые будут отвечать за количество жизней Амиго и Диабло: amigoLives и diabloLives.
Присвой каждой из этих переменных значение 9 (сразу в строке инициализации). Далее добавим методы, вызов которых будет уменьшать "жизни".

В классе Solution создай public static void методы:

amigoLostLife(), в котором уменьши переменную amigoLives на 1;
diabloLostLife(), в котором уменьши переменную diabloLives на 3.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Далее нам понадобятся методы атаки (Амиго) и защиты (Диабло):
создай public static метод amigoAttacks(), который вернет случайное число в диапазоне от 1 до 3 (воспользуйся вспомагательным методом getRandomNumber);
создай public static метод diabloDefends(), который также вернет случайное число в диапазоне от 1 до 3 (диапазоны зон атаки и защиты должны совпадать).
Требования:
В классе Solution должна быть публичная статическая переменная amigoLives типа int, которой нужно присвоить значение 9.
В классе Solution должна быть публичная статическая переменная diabloLives типа int, которой нужно присвоить значение 9.
В классе Solution должен быть публичный статический метод void amigoLostLife(), реализованный согласно условию.
В классе Solution должен быть публичный статический метод void diabloLostLife(), реализованный согласно условию.
В классе Solution должен быть публичный статический метод int amigoAttacks(), реализованный согласно условию.
В классе Solution должен быть публичный статический метод int diabloDefends(), реализованный согласно условию.

              +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Д3
Теперь реализуем саму битву — метод battle(). Добавь в класс Solution
публичный статический метод void battle. В этом методе Амиго будет атаковать,
а Диабло — защищаться и контратаковать до тех пор,
пока кто-то из них не лишиться всех "жизней".
++++++++++++++++++++++++++++++++++++++++
Если Амиго атаковал, а Диабло не защитился (зона защиты Диабло не совпала с зоной атаки Амиго),
то Диабло теряет "жизни" — вызываем соответствующий метод.
Если же Диабло защитился, он сразу же контратакует и Амиго теряет "жизнь" (снова вызываем нужный метод).

Кроме этого мы будем выводить в консоль ход битвы: если Диабло смог защититься,
то выводим фразу из переменной diabloDefendPhrase.
Если же удар Амиго попал в цель, то выводим в консоль значение amigoAttackPhrase.
Не забудь вызвать метод battle() в методе main после вызова метода findDiablo().

Требования:
В классе Solution должен быть публичный статический метод void battle().
Метод battle() не должен ничего делать, если кто-то из соперников не имеет "жизней".
Метод battle() должен вывести на экран значение поля diabloDefendPhrase
и вызвать метод amigoLostLife(), в том случае,
если Диабло защитился (amigoAttacks() == diabloDefends()).

Метод battle() должен вывести на экран значение поля amigoAttackPhrase и
вызвать метод diabloLostLife(), в том случае, если Диабло не смог защититься.
В методе main нужно вызвать метод battle() после вызова метода findDiablo().*/



Д4
Амиго сразился с Диабло, осталось определить — победил Амиго или нет.
Для этого создадим публичный статический метод isAmigoWin(), который будет возвращать true,
если Амиго победил, и false в противном случае.
Далее в методе main вызовем метод isAmigoWin. Если метод вернул true,
то нужно вывести в консоль фразу из переменной winPhrase, иначе —
вывести фразу из переменной loosePhrase.

Требования:
В классе Solution должен быть публичный статический метод isAmigoWin(),
который возвращает значение типа boolean.
Метод isAmigoWin() должен возвращать true, если у Диабло нет "жизней" или false, если Диабло жив.
В методе main нужно вызвать метод isAmigoWin() после вызова метода battle().
Если метод isAmigoWin() вернул true, то нужно вывести в консоль фразу
из переменной winPhrase, иначе вывести фразу из переменной loosePhrase.